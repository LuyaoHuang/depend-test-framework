#!/usr/bin/env python
"""
TODO: only use for debugging
"""
import os
import sys
import yaml
import itertools
import copy
import logging

# Simple magic for using scripts within a source tree
BASEDIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if os.path.isdir(os.path.join(BASEDIR, 'depend_test_framework')):
    os.environ['PATH'] += ":" + os.path.join(BASEDIR, 'scripts')
    sys.path.insert(0, BASEDIR)

from depend_test_framework.engine import Demo
from depend_test_framework.base_class import Params
import argparse
import importlib


def parse_cmd():
    parser = argparse.ArgumentParser(description='Depend Test Framework debug command')
    parser.add_argument('--engine', dest='engine', action='store',
                        default="Demo",
                        help='Which engine')
    parser.add_argument('--params', dest='params', action='store',
                        default="",
                        help='params will pass to test')
    parser.add_argument('--params-config', dest='params_conf', action='store',
                        help='config file of params will pass to test')
    parser.add_argument('--template', dest='template', action='store',
                        help='config file of the template')
    parser.add_argument('--test-objs', dest='test_objs', action='store',
                        default="",
                        help='test objs')
    parser.add_argument('--modules', dest='modules', action='store',
                        default="",
                        help='modules will be used')
    parser.add_argument('--doc-modules', dest='doc_modules', action='store',
                        default="",
                        help='doc modules will be used to gen test case')
    parser.add_argument('--mock', dest='mock', action='store_true',
                        help='Need mock all test steps')
    parser.add_argument('--debug', dest='debug', action='store_true',
                        help='Enable debug log')
    args = parser.parse_args()
    return args


def load_modules(modules_list):
    # TODO
    cmd_folder = os.path.realpath('.')
    sys.path.insert(0, cmd_folder)
    for module in modules_list:
        yield importlib.import_module(module)


def load_objs(test_objs_list):
    # TODO: only support 2 layer
    for test_obj in test_objs_list:
        tmp_module = importlib.import_module(test_obj.split('.')[0])
        yield getattr(tmp_module, test_obj.split('.')[1], None)


def load_params(params_str, params_conf=None):
    params = Params()
    if params_conf:
        with open(params_conf) as fp:
            data = yaml.load(fp)
            for key, val in data.items():
                if isinstance(val, dict):
                    setattr(params, key, Params(val))
                else:
                    setattr(params, key, val)
    if params_str:
        for param_str in params_str.split(';'):
            key, value = param_str.split('=')
            setattr(params, key, value)
    return params


# Maybe a better helper
def full_permutations(params_matrix):
    if isinstance(params_matrix, dict):
        val_pt = []
        keys = params_matrix.keys()
        for key in keys:
            ret = full_permutations(params_matrix[key])
            if isinstance(ret, list):
                val_pt.append(ret)
            else:
                val_pt.append([ret])
        pmt = itertools.product(*val_pt)
        return [Params(zip(keys, i)) for i in pmt]
    elif isinstance(params_matrix, list):
        ret = []
        for data in params_matrix:
            tmp = full_permutations(data)
            if isinstance(tmp, list):
                ret.extend(tmp)
            else:
                ret.append(tmp)
        return ret
    elif isinstance(params_matrix, (str, int, float)):
        return params_matrix
    else:
        raise Exception


# This will be a good choise
def load_template(template_file):
    with open(template_file) as fp:
        data = yaml.load(fp)

    cases = data['case']
    common_params = data['params']
    for case in cases:
        params = Params(common_params)
        if 'params' in case.keys():
            params.update(case['params'])
        modules = list(load_modules(case['modules']))
        doc_modules = list(load_modules(case['doc-modules']))
        test_objs = list(load_objs(case['test_objs']))
        if 'params_matrix' in case.keys():
            for extra_params in full_permutations(case['params_matrix']):
                new_params = Params(params)
                new_params.update(extra_params)
                yield new_params, modules, doc_modules, copy.deepcopy(test_objs)
        else:
            yield params, modules, doc_modules, copy.deepcopy(test_objs)


def main():
    args = parse_cmd()
    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    if args.template:
        for i, data in enumerate(load_template(args.template)):
            params, modules, doc_modules, test_objs = data
            d = Demo(modules, test_funcs=test_objs,
                     doc_modules=doc_modules)
            d.run(params, 'case%d.file' % i)
    else:
        modules_gen = load_modules(args.modules.split(','))
        doc_modules = load_modules(args.doc_modules.split(','))
        test_objs_gen = load_objs(args.test_objs.split(','))
        params = load_params(args.params, args.params_conf)

        if args.mock:
            params.mock = True

        # TODO: support specify test engine
        d = Demo(list(modules_gen), test_funcs=list(test_objs_gen),
                 doc_modules=list(doc_modules))
        d.run(params)

if __name__ == '__main__':
    main()
